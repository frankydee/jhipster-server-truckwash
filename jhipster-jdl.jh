/**
 * A company.
 * <p>
 * Currently, only companies can buy products 
 * and services from Tvatthallen (because only companies
 * can be invoiced),every user/customer has to belong to a
 * company.
 * </p>  
 */
entity Company {
	/**
	 * The name of the company
	 */
	name String required,
	/**
	 * The company registration number
	 */
    registrationNumber Integer,
    /**
    * External unique identifier for that company 
    * in the invoicing system
    **/
    externalReferenceId String
}


/**
 * Entity representing a customer. 
 * 	
 *   Has a one-to-one relationship with a 
 *   system user (entity generated by default by JHipster).
 * 
 *   This separate entity is created so that we can store extra 
 *   fields and get more flexibility with relationships to other entity
 *   which can be created through the JHipster entity generator
 *   (since relationships to and from the User entity are restricted)
 * 
 *  @Author: fdumas 
 */
entity Customer {
	name String required,
    preferredLanguage Language required,
    active String,
    loggingLevel LoggingLevel
}



enum LoggingLevel {
	ERROR,
	WARNING,
	INFO,
	DEBUG,
	TRACE
}

/**
 * Language code used to display the correct language in the UI 
  */
enum Language {
	EN, SV
}



entity Vehicle {
	/**
    * A short description identifying the vehicle
    *  e.g. "Lastbil 6" or "White Audi"
    **/
    description String required
    /**
    * Vehicle registration number (a.k.a. number plate)
    **/ 
    registrationNummer String required
	/**
	 * Vehicle Type: A car or a Van 
	 */
	type VehicleType
    /**
    * Whether it is the default vehicle for the user
    **/ 
    defaultFlag Boolean
    /**
     * Sort order with which it appears on the screen 
     */
    sortOrder Integer
    /**
     * Active flag:
     * 	If the vehicle is active, it will appear in the
     * 	UI to be selected. Otherwise, it will appear only
     * 	against historical data (like sessions)  
     * 
     */ 
    active Boolean
}


enum VehicleType {
	TRUCK,
    CAR
}


/**
* The ProductOrService entity
*   Can represent a product for sale (e.g. AdBlue) 
*   or a service (like "Washing a truck for 30 min")
*/
entity ProductOrService{
	shortDescription String
    longDescription String
    unitOfMeashre UnitOfMeasure
    pricePerUnit Double
    /**
     * Is this a product or a service
     */
    type ProductOrServiceType
    //TODO: Consider splitting this into a
    //   duration field and a timeout field
    /**
    * Maximum duration of the service in minutes. 
    *	
    *   This applies to services sold as a "package"
    *   e.g.  30 min Truck Wash,
    * 		  15 min Car wash
    *    
    * 	If a service is sold by the minutes, this field is indicates
    *   when the user will timeout.
    */
    maxDuration Integer
    /**
     * This is denormalised from the Inventory table for convenience
     * TODO:Should this be normalised here?
     */ 
    quantityInStock Double
    /**
     *  Whether the Quantity in stock is being metered
     * 
     *   This is applicable only for products.
     *      
     */
    quantityMetering ProductQuantityMetering
    /**
     * Interval in minutes of how often a product quantity being auto-metered should be logged
     *   (this applies especially where we have a product with a level meter)
     */  
    autoMeteringInterval Integer
    /**
     * Quantity at which an alert will be issued 
      */
    lowLevelAlert Boolean
    active Boolean
}


entity CustomerProductOrService {
	percentDiscount Integer
	overridingPricePerUnit Integer
}




/**
 * Recording of a product inventory
 * 
 */
entity Inventory {
	/**
	 * Time and date when the reading was taken 
	  */
	readingTime LocalDate
	/**
	 * Raw reading from the sensor (only applicable when entry type = AUTO) 
	  */
	senrorReading BigDecimal
	/**
	 * Quantity either entered manually or calculated from a sensor reading 
	  */
	quantity Double
	/** 
	 * Is this a manual or automatic entry?
	   */
	entryType ProductInventoryEntry  
}



enum ProductOrServiceType {
	PRODUCT, SERVICE
}

/** 
 **/
enum ProductQuantityMetering {
	INFINITE_QTY,
	QTY_NOT_METERED,
	MANUAL,
	AUTO
}

/**
 *  This is a subset of ProductQuantityMetering
  */
enum ProductInventoryEntry {
	MANUAL,
	AUTO
}


entity Session {
	startTime LocalDate,
    endTime LocalDate,
    endingCode SessionEndingCode,
    status SessionStatus,
    loggingLevel LoggingLevel 
}

enum SessionEndingCode {
	SYSTEM_TIMEOUT,
	SERVICE_TIME_LIMIT,
	USER_TRIGGERED
}

enum SessionStatus {
	IN_PROGRESS,
	COMPLETED,
	ERRORED
}


entity SessionLog {
	logType LogType,
	createDate LocalDate
	filePath String 
} 


enum LogType {
	DB,
	FILE
}

entity LogEntry {
	time LocalDate
	message String
}

entity SoldItem {
	totaliserStart Double
	totaliserEnd Double
	quantity Double
}


enum UnitOfMeasure {
	NUMBER,
	LITRE,
	MILLILITRE,
    HOUR,
    MINUTE
}



//relationship ManyToOne {
//	Customer {company(name)} to Company 
//}
//
//
//relationship ManyToMany {
//    //Replace by custom entity so that we can apply product or service discount specific to users
//	//Customer {allowedProduct(shortDescription)} to ProductOrService
//    Customer {vehicle(description)} to Vehicle {driver(name)}
//}
//
//relationship ManyToOne {
//	Session {customer} to Customer,
//   Session {vehicle}  to Vehicle 
//}
//
//
//relationship OneToMany {
//	Session to SoldItem
//}
//
//relationship ManyToOne {
//	SoldItem to ProductOrService
//}
//
//
//
////TODO: Define uni or bi directional...
//relationship OneToMany {
//	Session {log} to SessionLog {session},
//	SessionLog to LogEntry {log}
//}
//
//relationship OneToMany {
//	CustomerProductOrService {customer required} to Customer,
//	CustomerProductOrService {productOrService required} to ProductOrService
//}
//
//
////TODO: Define if should be uni-bi directional...
//relationship OneToMany {
//	ProductOrService to Inventory
//}
//
//relationship OneToOne {
//	Customer to User
//}
