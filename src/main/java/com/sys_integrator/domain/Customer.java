package com.sys_integrator.domain;

import io.swagger.annotations.ApiModel;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

import javax.persistence.*;
import javax.validation.constraints.*;

import java.io.Serializable;
import java.util.Objects;

import com.sys_integrator.domain.enumeration.Language;

import com.sys_integrator.domain.enumeration.LoggingLevel;

/**
 * Entity representing a customer.
 * 
 * Has a one-to-one relationship with a
 * system user (entity generated by default by JHipster).
 * 
 * This separate entity is created so that we can store extra
 * fields and get more flexibility with relationships to other entity
 * which can be created through the JHipster entity generator
 * (since relationships to and from the User entity are restricted)
 * 
 * @Author: fdumas
 */
@ApiModel(description = "Entity representing a customer. Has a one-to-one relationship with a system user (entity generated by default by JHipster). This separate entity is created so that we can store extra fields and get more flexibility with relationships to other entity which can be created through the JHipster entity generator (since relationships to and from the User entity are restricted) @Author: fdumas")
@Entity
@Table(name = "customer")
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
public class Customer implements Serializable {

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotNull
    @Column(name = "name", nullable = false)
    private String name;

    @NotNull
    @Enumerated(EnumType.STRING)
    @Column(name = "preferred_language", nullable = false)
    private Language preferredLanguage;

    @Column(name = "active")
    private String active;

    @Enumerated(EnumType.STRING)
    @Column(name = "logging_level")
    private LoggingLevel loggingLevel;

    // jhipster-needle-entity-add-field - JHipster will add fields here, do not remove
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public Customer name(String name) {
        this.name = name;
        return this;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Language getPreferredLanguage() {
        return preferredLanguage;
    }

    public Customer preferredLanguage(Language preferredLanguage) {
        this.preferredLanguage = preferredLanguage;
        return this;
    }

    public void setPreferredLanguage(Language preferredLanguage) {
        this.preferredLanguage = preferredLanguage;
    }

    public String getActive() {
        return active;
    }

    public Customer active(String active) {
        this.active = active;
        return this;
    }

    public void setActive(String active) {
        this.active = active;
    }

    public LoggingLevel getLoggingLevel() {
        return loggingLevel;
    }

    public Customer loggingLevel(LoggingLevel loggingLevel) {
        this.loggingLevel = loggingLevel;
        return this;
    }

    public void setLoggingLevel(LoggingLevel loggingLevel) {
        this.loggingLevel = loggingLevel;
    }
    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here, do not remove

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Customer customer = (Customer) o;
        if (customer.getId() == null || getId() == null) {
            return false;
        }
        return Objects.equals(getId(), customer.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(getId());
    }

    @Override
    public String toString() {
        return "Customer{" +
            "id=" + getId() +
            ", name='" + getName() + "'" +
            ", preferredLanguage='" + getPreferredLanguage() + "'" +
            ", active='" + getActive() + "'" +
            ", loggingLevel='" + getLoggingLevel() + "'" +
            "}";
    }
}
